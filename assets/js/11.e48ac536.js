(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{330:function(t,s,a){"use strict";a.r(s);var e=a(33),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"联合类型-union-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型-union-types"}},[t._v("#")]),t._v(" 联合类型 (Union Types)")]),t._v(" "),a("p",[t._v("联合类型表示取值可以是多种类型中的一种")]),t._v(" "),a("h2",{attrs:{id:"简单的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子"}},[t._v("#")]),t._v(" 简单的例子")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Allen Yu'")]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能将类型“true”分配给类型“string | number”")]),t._v("\n")])])]),a("p",[t._v("可以给 "),a("code",[t._v("myName")]),t._v(" 赋值字符串和数字类型，赋值为布尔类型的值时，就会提示报错。")]),t._v(" "),a("p",[t._v("联合类型使用 "),a("code",[t._v("|")]),t._v(" 分割每个类型")]),t._v(" "),a("h2",{attrs:{id:"访问联合类型的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问联合类型的属性和方法"}},[t._v("#")]),t._v(" 访问联合类型的属性和方法")]),t._v(" "),a("p",[t._v("当 "),a("code",[t._v("TypeScript")]),t._v(" 不确定联合类型中的变量，具体是哪个类型时，我们只能访问联合类型中"),a("strong",[t._v("并集的属性和方法")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\nmyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型“number”上不存在属性“length”。")]),t._v("\n")])])]),a("p",[t._v("上例中，"),a("code",[t._v("toString")]),t._v(" 是 "),a("code",[t._v("string")]),t._v(" 和 "),a("code",[t._v("number")]),t._v(" 的共同的方法，所以可以使用，而 "),a("code",[t._v("length")]),t._v(" 属性，"),a("code",[t._v("number")]),t._v(" 类型是没有的，所以不能使用。")]),t._v(" "),a("p",[t._v("联合类型的变量在被赋值的时候，会根据类型推论的规则，推断出一个类型。")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Allen Yu'")]),t._v("\nmyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\nmyName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[t._v("以上代码可正常执行，是因为 "),a("code",[t._v("TypeScript")]),t._v(" 推断第一个有值的 "),a("code",[t._v("myName")]),t._v(" 是 "),a("code",[t._v("string")]),t._v(" 类型，第二个有值的 "),a("code",[t._v("myName")]),t._v(" 是 "),a("code",[t._v("number")]),t._v(" 类型。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://ts.xcatliu.com/basics/union-types",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 入门教程 - 联合类型"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);